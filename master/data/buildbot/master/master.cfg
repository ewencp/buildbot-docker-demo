# -*- python -*-
# ex: set syntax=python:

from twisted.internet import defer, threads
from twisted.python import log

from buildbot.buildslave import AbstractLatentBuildSlave
from buildbot import config, interfaces

try:
    from docker import client
    from docker.errors import APIError
    _hush_pyflakes = [client]
except ImportError:
    client = None


class DockerLatentBuildSlave(AbstractLatentBuildSlave):

    instance = None

    def __init__(self, name, password,
                 docker_host,
                 image,
                 command,
                 max_builds=None, notify_on_missing=[], missing_timeout=60*20,
                 build_wait_timeout=60*10, properties={}, locks=None,
                 working_dir=None, links=None, privileged=False):

        if not client:
            config.error("The python module 'docker-py' is needed  "
                         "to use a DockerLatentBuildSlave")

        AbstractLatentBuildSlave.__init__(
            self, name, password, max_builds, notify_on_missing,
            missing_timeout, build_wait_timeout, properties, locks)
        self.docker_host = docker_host
        self.image = image
        self.command = command
        self.working_dir = working_dir
        self.links = links
        self.privileged = privileged

    def start_instance(self, build):
        if self.instance is not None:
            raise ValueError('instance active')
        log.msg("Starting Docker instance")
        return threads.deferToThread(self._start_instance)

    def _start_instance(self):
        # Authenticate to OpenStack.
        docker_client = client.Client(self.docker_host)
        try:
            instance = docker_client.create_container(
                self.image,
                self.command,
                environment=[
                    'BUILDBOT_USER=%s' % self.slavename,
                    'BUILDBOT_PASSWORD=%s' % self.password,
                ],
                working_dir=self.working_dir
            )
            if instance.get('Id', None):
                self.instance = instance
                docker_client.start(instance['Id'], links=self.links, privileged=self.privileged)
                return [instance['Id'], self.image]
            else:
                raise interfaces.LatentBuildSlaveFailedToSubstantiate('Failed to start container')
        except APIError as e:
            raise interfaces.LatentBuildSlaveFailedToSubstantiate('Failed to start container due to API error: %s' % str(e))

    def stop_instance(self, fast=False):
        if self.instance is None:
            # be gentle.  Something may just be trying to alert us that an
            # instance never attached, and it's because, somehow, we never
            # started.
            return defer.succeed(None)
        instance = self.instance
        self.instance = None
        self._stop_instance(instance, fast)

    def _stop_instance(self, instance, fast):
        docker_client = client.Client(self.docker_host)
        docker_client.stop(instance['Id'])
        docker_client.wait(instance['Id'])


# This is a sample buildmaster config file. It must be installed as
# 'master.cfg' in your buildmaster's base directory.

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

####### BUILDSLAVES

import random

# The 'slaves' list defines the set of recognized buildslaves. Each element is
# a BuildSlave object, specifying a unique slave name and password.  The same
# slave name and password must be configured on the slave.
c['slaves'] = [
            DockerLatentBuildSlave(
                "docker-single-use", str(random.getrandbits(1000)),
                "unix://var/run/docker.sock",
                'buildbot-slave',
                'wrapdocker twistd --nodaemon --no_save -y buildbot.tac',
                working_dir='/data/buildbot/slave',
                build_wait_timeout=0,
                links=[('bbmaster','bbmaster'), ('apt-cacher-ng','apt-cacher-ng')],
                privileged=True,
                ),
            DockerLatentBuildSlave(
                "docker-reusable", str(random.getrandbits(1000)),
                "unix://var/run/docker.sock",
                'buildbot-slave',
                'wrapdocker twistd --nodaemon --no_save -y buildbot.tac',
                working_dir='/data/buildbot/slave',
                build_wait_timeout=10*60,
                links=[('bbmaster','bbmaster'), ('apt-cacher-ng','apt-cacher-ng')],
                privileged=True,
                ),
]

# 'protocols' contains information about protocols which master will use for
# communicating with slaves.
# You must define at least 'port' option that slaves could connect to your master
# with this protocol.
# 'port' must match the value configured into the buildslaves (with their
# --master option)
c['protocols'] = {'pb': {'port': 9989}}

####### CHANGESOURCES

from buildbot.changes.gitpoller import GitPoller
c['change_source'] = []
c['change_source'].append(GitPoller(
        'git://github.com/ewencp/django-docker',
        workdir='gitpoller-workdir', branch='master',
        pollinterval=300))

####### SCHEDULERS

from buildbot.schedulers.basic import SingleBranchScheduler
from buildbot.schedulers.forcesched import ForceScheduler
from buildbot.changes import filter
c['schedulers'] = []
c['schedulers'].append(SingleBranchScheduler(
                            name="all",
                            change_filter=filter.ChangeFilter(branch='master'),
                            treeStableTimer=None,
                            builderNames=["from-scratch"]))
c['schedulers'].append(ForceScheduler(
                            name="force",
                            builderNames=["from-scratch", "update-build"]))

####### BUILDERS

# The 'builders' list defines the Builders, which tell Buildbot how to perform a build:
# what steps, and which slaves can execute them.  Note that any particular build will
# only take place on one slave.

from buildbot.process.factory import BuildFactory
from buildbot.steps.source.git import Git
from buildbot.steps.shell import ShellCommand

factory = BuildFactory()
# check out the source
factory.addStep(Git(repourl='git://github.com/ewencp/django-docker', mode='incremental'))
factory.addStep(ShellCommand(name="Docker Build", command=["docker", "build", "-t", "django-docker", "."]))
factory.addStep(ShellCommand(name="Tests", command=["docker", "run", "django-docker", "/opt/ve/djdocker/bin/python2.7", "/opt/apps/djdocker/manage.py", "test"]))

from buildbot.config import BuilderConfig

c['builders'] = []
c['builders'].append(
    BuilderConfig(name="from-scratch",
      slavenames=["docker-single-use"],
      factory=factory))
c['builders'].append(
    BuilderConfig(name="update-build",
      slavenames=["docker-reusable"],
      factory=factory))

####### STATUS TARGETS

# 'status' is a list of Status Targets. The results of each build will be
# pushed to these targets. buildbot/status/*.py has a variety to choose from,
# including web pages, email senders, and IRC bots.

c['status'] = []

from buildbot.status import html
from buildbot.status.web import authz, auth

authz_cfg=authz.Authz(
    # change any of these to True to enable; see the manual for more
    # options
    auth=auth.BasicAuth([("buildbot","password")]),
    gracefulShutdown = False,
    forceBuild = 'auth', # use this to test your slave once it is set up
    forceAllBuilds = False,
    pingBuilder = False,
    stopBuild = False,
    stopAllBuilds = False,
    cancelPendingBuild = False,
)
c['status'].append(html.WebStatus(http_port=8010, authz=authz_cfg))

####### PROJECT IDENTITY

# the 'title' string will appear at the top of this buildbot
# installation's html.WebStatus home page (linked to the
# 'titleURL') and is embedded in the title of the waterfall HTML page.

c['title'] = "Docker Buildbot Demo"
c['titleURL'] = "https://github.com/ewencp/docker-buildbot-demo"

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server (usually the html.WebStatus page) is visible. This
# typically uses the port number set in the Waterfall 'status' entry, but
# with an externally-visible host name which the buildbot cannot figure out
# without some help.

c['buildbotURL'] = "http://localhost:8010/"

####### DB URL

c['db'] = {
    # This specifies what database buildbot uses to store its state.  You can leave
    # this at its default for all but the largest installations.
    'db_url' : "sqlite:///state.sqlite",
}
